//this script file is for code check, docker build

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // for spring boot
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        //for docker build
        classpath('se.transmode.gradle:gradle-docker:1.2')
        // for unit test code coverage  -- need to find a way to put it in its file
        classpath('com.palantir:jacoco-coverage:0.4.0')
    }
}

project(':config') {
    apply plugin: 'java'
    jar {
        baseName = 'config'
        version = '0.0.1'
    }
}
project(':customer-authentication') {
    apply plugin: 'java'
    jar {
        baseName = 'customer-authentication'
        version = '0.0.1'
    }
}
project(':customer-info') {
    apply plugin: 'java'
    jar {
        baseName = 'customer-info'
        version = '0.0.1'
    }
}
project(':device-info') {
    apply plugin: 'java'
    jar {
        baseName = 'device-info'
        version = '0.0.1'
    }
}
project(':file-service') {
    apply plugin: 'java'
    jar {
        baseName = 'file-service'
        version = '0.0.1'
    }
}
project(':message-pusher') {
    apply plugin: 'java'
    jar {
        baseName = 'message-pusher'
        version = '0.0.1'
    }
}
project(':wechat') {
    apply plugin: 'java'
    jar {
        baseName = 'wechat'
        version = '0.0.1'
    }
}

//for all sub projects
subprojects {
    if (it.name != 'base' && it.name != 'commons') {
        //group name
        group = 'umasuo'

        // build docker image task
        apply from: '../docker_build.gradle'
    }

    //for code analyzer
    apply plugin: 'java'
    apply from: '../code_analyzer/pmd.gradle'
    apply from: '../code_analyzer/checkstyle.gradle'
    apply from: '../code_analyzer/findbugs.gradle'
    apply from: '../code_analyzer/test_coverage.gradle'


    apply plugin: 'jacoco'
    test.useTestNG()

    // Specify the gradle wrapper version, all use 3.0
    task wrapper(type: Wrapper) {
        gradleVersion = '3.1'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

